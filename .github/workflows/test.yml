name: tests.yml

permissions:
  contents: read
  actions: read

on:
  workflow_dispatch: {}
  push:
    branches:
      - "*"
      - "*/*"
      - "**"

jobs:
  run_tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    permissions:
      issues: write

    steps:
      - name: Check out GitHub repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          fetch-depth: 1
          ref: ${{ github.sha }}
          persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        id: setup_python
        with:
          python-version-file: '.python-version'

      - name: Get Python version
        run: echo "PYTHON_VERSION=$(python --version)" >> $GITHUB_ENV

      - name: Manage Poetry cache
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809
        id: poetry-cache
        with:
          path: |
            ~/.cache/pypoetry/cache
            ~/.cache/pypoetry/artifacts
          key: poetry-cache-${{ runner.os }}-${{ hashFiles('poetry.lock') }}
          restore-keys: poetry-cache-${{ runner.os }}-

      - name: Create virtual environment
        run: python -m venv venv

      - name: Activate venv and install Poetry
        run: |
          source venv/bin/activate
          python --version
          pip install --upgrade pip
          pip install poetry==2.1.4

      - name: Install dependencies with Poetry
        run: |
          source venv/bin/activate
          poetry install --with dev

      - name: Check and fix with Ruff
        run: |
          source venv/bin/activate
          poetry run ruff check ./tests/*.py ./openseries/*.py --fix --exit-non-zero-on-fix

      - name: Format with Ruff
        run: |
          source venv/bin/activate
          poetry run ruff format

      - name: Manage Mypy cache
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809
        id: mypy-cache
        with:
          path: .mypy_cache
          key: mypy-cache-${{ hashFiles('**/*.py') }}
          restore-keys: mypy-cache-

      - name: Type check with Mypy
        run: |
          source venv/bin/activate
          poetry run mypy --cache-dir .mypy_cache .

      - name: Tests with Pytest
        id: pytest
        continue-on-error: true
        run: |
          source venv/bin/activate
          PYTHONPATH=${PWD} poetry run pytest

      - name: Create GitHub issue on failure
        if: ${{ steps.pytest.outcome == 'failure' }}
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea
        env:
          GH_OWNER: ${{ github.repository_owner }}
          GH_REPO: ${{ github.event.repository.name }}
          GH_RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        with:
          script: |
            const owner = process.env.GH_OWNER;
            const repo = process.env.GH_REPO;
            const runUrl = process.env.GH_RUN_URL;

            await github.rest.issues.create({
              owner,
              repo,
              title: `Tests failed on ${new Date().toDateString()}`,
              body: `See the full logs here: ${runUrl}`,
            });

      - name: Fail job if tests failed
        if: ${{ steps.pytest.outcome == 'failure' }}
        run: exit 1

      - name: Upload test results to Codecov
        if: ${{ github.ref_name == 'master' }}
        uses: codecov/test-results-action@47f89e9acb64b76debcd5ea40642d25a4adced9f
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: junit.xml
          verbose: true

      - name: Upload coverage to Codecov
        if: ${{ github.ref_name == 'master' }}
        uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: CaptorAB/openseries
          verbose: true
