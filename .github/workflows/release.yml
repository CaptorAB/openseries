name: release.yml

permissions:
  contents: read

on:
  workflow_dispatch: {}

jobs:
  build_test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
    defaults:
      run:
        shell: bash

    steps:
      - name: Check out repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        id: setup_python
        with:
          python-version-file: '.python-version'

      - name: Create virtual environment
        run: python -m venv venv

      - name: Install Poetry
        run: |
          source venv/bin/activate
          pip install poetry==2.1.4

      - name: Install dependencies with Poetry
        run: |
          source venv/bin/activate
          poetry install --with dev
          poetry show -l

      - name: Check and fix with Ruff
        run: |
          source venv/bin/activate
          poetry run ruff check ./tests/*.py ./openseries/*.py --fix --exit-non-zero-on-fix

      - name: Format with Ruff
        run: |
          source venv/bin/activate
          poetry run ruff format

      - name: Type check with Mypy
        run: |
          source venv/bin/activate
          poetry run mypy .

      - name: Tests with Pytest
        id: pytest
        run: |
          source venv/bin/activate
          PYTHONPATH=${PWD} poetry run pytest

      - name: Create GitHub issue on failure
        if: ${{ failure() }}
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea
        env:
          GH_OWNER: ${{ github.repository_owner }}
          GH_REPO: ${{ github.event.repository.name }}
          GH_RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        with:
          script: |
            const { GH_OWNER, GH_REPO, GH_RUN_URL } = process.env;
            await github.rest.issues.create({
              owner: GH_OWNER,
              repo: GH_REPO,
              title: `Tests failed on ${new Date().toDateString()}`,
              body: `See the full logs here: ${GH_RUN_URL}`,
            });

  version_tag:
    needs: build_test
    if: ${{ needs.build_test.result == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    defaults:
      run:
        shell: bash
    outputs:
      tag_version: ${{ steps.tag.outputs.tag_version }}

    steps:
      - name: Check out repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: Import GPG key and create tag (no passphrase)
        id: tag
        env:
          GPG_PRIVATE_KEY:    ${{ secrets.GPG_PRIVATE_KEY }}
          GITHUB_ACTOR_EMAIL: ${{ github.actor }}@users.noreply.github.com
        run: |
          set -euo pipefail
          : "${GPG_PRIVATE_KEY?Missing GPG_PRIVATE_KEY}"
          export GNUPGHOME="$HOME/.gnupg"
          mkdir -p "$GNUPGHOME"; chmod 700 "$GNUPGHOME"
          printf 'allow-loopback-pinentry\n' > "$GNUPGHOME/gpg-agent.conf"
          gpgconf --kill gpg-agent || true
          gpgconf --reload gpg-agent || true
          echo "$GPG_PRIVATE_KEY" | gpg --batch --yes --pinentry-mode loopback --import
          KEY_ID="$(gpg --list-secret-keys --with-colons | awk -F: '/^fpr:/ {print $10; exit}')"
          git config --global user.name  "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR_EMAIL}"
          git config --global user.signingkey "$KEY_ID"
          cat > "$HOME/gpg-nopass.sh" <<'EOF'
          #!/usr/bin/env bash
          exec gpg --batch --yes --no-tty --pinentry-mode loopback "$@"
          EOF
          chmod +x "$HOME/gpg-nopass.sh"
          git config --global gpg.program "$HOME/gpg-nopass.sh"
          echo ok > /tmp/_ok
          "$HOME/gpg-nopass.sh" -u "$KEY_ID" --detach-sign -o /tmp/_ok.sig /tmp/_ok
          version=$(grep -oPm1 '(?<=version = ").*(?=")' pyproject.toml)
          echo "Version: $version"
          git tag -s "$version" -m "Release v$version"
          git verify-tag "$version"
          git push origin "$version"
          echo "tag_version=$version" >> "$GITHUB_OUTPUT"

  release:
    needs: version_tag
    if: ${{ needs.version_tag.result == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Create GitHub release
        uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8
        with:
          tag_name: ${{ needs.version_tag.outputs.tag_version }}
