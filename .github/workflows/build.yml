name: build.yml

permissions:
  contents: read
  actions: read

on:
  workflow_dispatch: {}

jobs:

  windows:
    runs-on: windows-latest
    permissions:
      contents: read
      issues: write
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        python-version: [ '3.10', '3.11', '3.12', '3.13', '3.14' ]

    steps:
      - name: Check out repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          fetch-depth: 1
          ref: ${{ github.sha }}
          persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Poetry dependencies
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809
        with:
          path: |
            ~/AppData/Local/pypoetry/Cache/cache
            ~/AppData/Local/pypoetry/Cache/artifacts
          key: poetry-windows-${{ hashFiles('poetry.lock') }}
          restore-keys: poetry-windows-

      - name: Create virtual environment and install Poetry
        run: |
          python -m venv venv
          . venv/Scripts/activate
          python.exe -m pip install --upgrade pip
          pip install poetry==2.2.1

      - name: Install dependencies with Poetry
        run: |
          . venv/Scripts/activate
          poetry install --with dev

      - name: Check and fix with Ruff
        run: |
          . venv/Scripts/activate
          poetry run ruff check ./tests/*.py ./openseries/*.py --fix --exit-non-zero-on-fix

      - name: Format with Ruff
        run: |
          . venv/Scripts/activate
          poetry run ruff format

      - name: Type check with Mypy
        run: |
          . venv/Scripts/activate
          poetry run mypy .

      - name: Tests with Pytest
        id: pytest
        continue-on-error: true
        run: |
          . venv/Scripts/activate
          PYTHONPATH=${PWD} poetry run pytest

      - name: Create GitHub issue on failure
        if: ${{ steps.pytest.outcome == 'failure' }}
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd
        env:
          GH_OWNER: ${{ github.repository_owner }}
          GH_REPO: ${{ github.event.repository.name }}
          GH_RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        with:
          script: |
            const { GH_OWNER, GH_REPO, GH_RUN_URL } = process.env;
            await github.rest.issues.create({
              owner: GH_OWNER,
              repo: GH_REPO,
              title: `Tests failed on ${new Date().toDateString()}`,
              body: `See the full logs here: ${GH_RUN_URL}`,
            });

      - name: Fail job if tests failed
        if: ${{ steps.pytest.outcome == 'failure' }}
        run: exit 1

      - name: Package and check
        run: |
          . venv/Scripts/activate
          poetry build
          poetry check

  ubuntu:
    needs: windows
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
    strategy:
      fail-fast: false
      matrix:
        python-version: [ '3.10', '3.11', '3.12', '3.13', '3.14' ]

    steps:
      - name: Check out repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          fetch-depth: 1
          ref: ${{ github.sha }}
          persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Poetry dependencies
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809
        with:
          path: |
            ~/.cache/pypoetry/cache
            ~/.cache/pypoetry/artifacts
          key: poetry-ubuntu-${{ hashFiles('poetry.lock') }}
          restore-keys: poetry-ubuntu-

      - name: Create virtual environment and install Poetry
        run: |
          python -m venv venv
          . venv/bin/activate
          pip install --upgrade pip
          pip install poetry==2.2.1

      - name: Install dependencies with Poetry
        run: |
          . venv/bin/activate
          poetry install --with dev

      - name: Check and fix with Ruff
        run: |
          . venv/bin/activate
          poetry run ruff check ./tests/*.py ./openseries/*.py --fix --exit-non-zero-on-fix

      - name: Format with Ruff
        run: |
          . venv/bin/activate
          poetry run ruff format

      - name: Type check with Mypy
        run: |
          . venv/bin/activate
          poetry run mypy .

      - name: Tests with Pytest
        id: pytest
        continue-on-error: true
        run: |
          . venv/bin/activate
          PYTHONPATH=${PWD} poetry run pytest \
            -n auto \
            --dist loadscope \
            --cov=openseries \
            --cov-report=term \
            --cov-report=term-missing \
            --cov-report=xml \
            --junitxml=junit.xml

      - name: Create GitHub issue on failure
        if: ${{ steps.pytest.outcome == 'failure' }}
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd
        env:
          GH_OWNER: ${{ github.repository_owner }}
          GH_REPO: ${{ github.event.repository.name }}
          GH_RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        with:
          script: |
            const { GH_OWNER, GH_REPO, GH_RUN_URL } = process.env;
            await github.rest.issues.create({
              owner: GH_OWNER,
              repo: GH_REPO,
              title: `Tests failed on ${new Date().toDateString()}`,
              body: `See the full logs here: ${GH_RUN_URL}`,
            });

      - name: Fail job if tests failed
        if: ${{ steps.pytest.outcome == 'failure' }}
        run: exit 1

      - name: Package and check
        run: |
          . venv/bin/activate
          poetry build
          poetry check

  macos:
    needs: ubuntu
    runs-on: macos-latest
    permissions:
      contents: read
      issues: write
    strategy:
      fail-fast: false
      matrix:
        python-version: [ '3.10', '3.11', '3.12', '3.13', '3.14' ]

    steps:
      - name: Check out repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          fetch-depth: 1
          ref: ${{ github.sha }}
          persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Poetry dependencies
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809
        with:
          path: |
            ~/Library/Caches/pypoetry/cache
            ~/Library/Caches/pypoetry/artifacts
          key: poetry-macos-${{ hashFiles('poetry.lock') }}
          restore-keys: poetry-macos-

      - name: Create virtual environment and install Poetry
        run: |
          python -m venv venv
          . venv/bin/activate
          pip install --upgrade pip
          pip install poetry==2.2.1

      - name: Install dependencies with Poetry
        run: |
          . venv/bin/activate
          poetry install --with dev

      - name: Check and fix with Ruff
        run: |
          . venv/bin/activate
          poetry run ruff check ./tests/*.py ./openseries/*.py --fix --exit-non-zero-on-fix

      - name: Format with Ruff
        run: |
          . venv/bin/activate
          poetry run ruff format

      - name: Type check with Mypy
        run: |
          . venv/bin/activate
          poetry run mypy .

      - name: Tests with Pytest
        id: pytest
        continue-on-error: true
        run: |
          . venv/bin/activate
          PYTHONPATH=${PWD} poetry run pytest --cov=openseries --dist loadscope -n auto

      - name: Create GitHub issue on failure
        if: ${{ steps.pytest.outcome == 'failure' }}
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd
        env:
          GH_OWNER: ${{ github.repository_owner }}
          GH_REPO: ${{ github.event.repository.name }}
          GH_RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        with:
          script: |
            const { GH_OWNER, GH_REPO, GH_RUN_URL } = process.env;
            await github.rest.issues.create({
              owner: GH_OWNER,
              repo: GH_REPO,
              title: `Tests failed on ${new Date().toDateString()}`,
              body: `See the full logs here: ${GH_RUN_URL}`,
            });

      - name: Fail job if tests failed
        if: ${{ steps.pytest.outcome == 'failure' }}
        run: exit 1

      - name: Package and check
        run: |
          . venv/bin/activate
          poetry build
          poetry check
