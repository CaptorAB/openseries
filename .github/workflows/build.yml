name: build

on: workflow_dispatch

jobs:
  build:
    runs-on: ${{ matrix.os }}

    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: false
      matrix:
        os: [ macos-latest, windows-latest, ubuntu-latest ]
        python-version: [ '3.10', '3.11', '3.12', '3.13' ]

    steps:
      - name: Check out GitHub repository ${{ github.repository }}
        uses: actions/checkout@v4

      - name: Set up Python on ${{ runner.os }}
        uses: actions/setup-python@v5
        id: setup_python
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get Python version
        run: echo "PYTHON_VERSION=$(python --version)" >> $GITHUB_ENV

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: |
            if [[ "$RUNNER_OS" == "Windows" ]]; then
              ~/AppData/Local/pypoetry/Cache/cache
              ~/AppData/Local/pypoetry/Cache/artifacts
            elif [[ "$RUNNER_OS" == "macOS" ]]; then
              ~/Library/Caches/pypoetry/cache
              ~/Library/Caches/pypoetry/artifacts
            else
              ~/.cache/pypoetry/cache
              ~/.cache/pypoetry/artifacts
            fi
          key: poetry-${{ runner.os }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            poetry-${{ runner.os }}-

      - name: Create virtual environment on ${{ env.PYTHON_VERSION }}
        run: python -m venv venv

      - name: Activate virtual environment and install Poetry
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            source venv/Scripts/activate
            python.exe -m pip install --upgrade pip
          else
            source venv/bin/activate
            pip install --upgrade pip
          fi
          pip install poetry==2.0.0

      - name: Install dependencies with Poetry
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            source venv/Scripts/activate
          else
            source venv/bin/activate
          fi
          poetry install --with dev

      - name: Check and fix with Ruff
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            source venv/Scripts/activate
          else
            source venv/bin/activate
          fi
          poetry run ruff check ./tests/*.py ./openseries/*.py --fix --exit-non-zero-on-fix

      - name: Format with Ruff
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            source venv/Scripts/activate
          else
            source venv/bin/activate
          fi
          poetry run ruff format

      - name: Type check with Mypy
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            source venv/Scripts/activate
          else
            source venv/bin/activate
          fi
          poetry run mypy .

      - name: Tests with Pytest
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            source venv/Scripts/activate
          else
            source venv/bin/activate
          fi
          PYTHONPATH=${PWD} poetry run coverage run -m pytest --verbose

      - name: Report coverage
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            source venv/Scripts/activate
          else
            source venv/bin/activate
          fi
          poetry run coverage report

      - name: Package and check
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            source venv/Scripts/activate
          else
            source venv/bin/activate
          fi
          poetry build
          poetry check
