name: deploy

permissions:
  contents: write
  actions: write

on:
  workflow_dispatch: {}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    defaults:
      run:
        shell: bash

    steps:
      - name: Check out GitHub repository ${{ github.repository }}
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: true

      - name: Set up Python on ${{ runner.os }}
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        id: setup_python
        with:
          python-version-file: '.python-version'

      - name: Get Python version
        run: echo "PYTHON_VERSION=$(python --version)" >> $GITHUB_ENV

      - name: Create virtual environment on ${{ env.PYTHON_VERSION }}
        run: python -m venv venv

      - name: Activate virtual environment and install Poetry
        run: |
          source venv/bin/activate
          pip install poetry==2.1.3

      - name: Install dependencies with Poetry
        run: |
          source venv/bin/activate
          poetry install --with dev
          poetry show -l

      - name: Check and fix with Ruff
        run: |
          source venv/bin/activate
          poetry run ruff check ./tests/*.py ./openseries/*.py --fix --exit-non-zero-on-fix

      - name: Format with Ruff
        run: |
          source venv/bin/activate
          poetry run ruff format

      - name: Type check with Mypy
        run: |
          source venv/bin/activate
          poetry run mypy .

      - name: Tests with Pytest
        id: pytest
        continue-on-error: true
        run: |
          source venv/bin/activate
          PYTHONPATH=${PWD} poetry run pytest

      - name: Create GitHub issue on failure
        if: ${{ steps.pytest.outcome == 'failure' }}
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            await github.rest.issues.create({
              owner: 'CaptorAB',
              repo: 'openseries',
              title: `Tests failed on ${new Date().toDateString()}`,
              body: `See the full logs here: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`,
            })

      - name: Fail job if tests failed
        if: ${{ steps.pytest.outcome == 'failure' }}
        run: exit 1

      - name: Upload test results to Codecov
        if: ${{ github.ref_name == 'master' }}
        uses: codecov/test-results-action@47f89e9acb64b76debcd5ea40642d25a4adced9f # v1.1.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: junit.xml
          verbose: true

      - name: Upload coverage to Codecov.io
        if: ${{ github.ref_name == 'master' }}
        uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24 # v5.4.3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: CaptorAB/openseries
          verbose: true

      - name: Create Git Tag with version from pyproject.toml
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        run: |
          export GPG_TTY=$(tty)
          echo "$GPG_PRIVATE_KEY" | gpg --batch --pinentry-mode loopback --import
          version=$(grep -oPm1 '(?<=version = ").*(?=")' pyproject.toml)
          echo "Version: $version"
          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR_EMAIL}"
          git config --global user.signingkey 03BE0D766CA0CF9852B592D5BBE8A9CD2E275A01
          git config --global gpg.program gpg
          git tag -a "$version" -m "Release v$version"
          git push origin "$version"
          echo "tag_version=$version" >> "$GITHUB_ENV"

      - name: Create GitHub release
        uses: softprops/action-gh-release@da05d552573ad5aba039eaac05058a918a7bf631 # v2.2.2
        with:
          tag_name: ${{ env.tag_version }}

      - name: Build and Publish to Test PyPI
        run: |
          source venv/bin/activate
          poetry config repositories.testpypi https://test.pypi.org/legacy/
          poetry config pypi-token.testpypi ${{ secrets.TEST_PYPI_API_TOKEN }}
          poetry build
          poetry check
          poetry publish --repository testpypi --skip-existing

      - name: Build and Publish to PyPI
        run: |
          source venv/bin/activate
          poetry config pypi-token.pypi ${{ secrets.PYPI_API_TOKEN }}
          poetry build
          poetry check
          poetry publish
