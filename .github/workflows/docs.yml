name: docs.yml

permissions:
  contents: read

on:
  push:
    branches:
      - master
    paths:
      - 'docs/**'
      - 'openseries/**'
      - 'pyproject.toml'
      - '.readthedocs.yaml'
  workflow_dispatch: {}
  pull_request:
    branches:
      - master
    paths:
      - 'docs/**'
      - 'openseries/**'
      - 'pyproject.toml'
      - '.readthedocs.yaml'

jobs:
  docs:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Check out GitHub repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          fetch-depth: 1
          ref: ${{ github.sha }}
          persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c
        id: setup_python
        with:
          python-version-file: '.python-version'

      - name: Manage Poetry cache
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809
        with:
          path: |
            ~/.cache/pypoetry/cache
            ~/.cache/pypoetry/artifacts
          key: poetry-cache-${{ runner.os }}-${{ hashFiles('poetry.lock') }}
          restore-keys: poetry-cache-${{ runner.os }}-

      - name: Create virtual environment and install Poetry
        run: |
          python -m venv venv
          . venv/bin/activate
          pip install --upgrade pip
          pip install poetry==2.2.1

      - name: Install dependencies with Poetry
        run: |
          . venv/bin/activate
          poetry install --with docs

      - name: Build documentation
        run: |
          . venv/bin/activate
          cd docs
          make builddocs

      - name: Check for documentation warnings
        run: |
          . venv/bin/activate
          cd docs
          # Build with warnings as errors to catch issues
          make strict || {
            echo "Documentation build failed with warnings/errors:"
            echo "This indicates potential issues that should be fixed."
            exit 1
          }

  docs_site:
    runs-on: ubuntu-latest
    needs: docs
    if: github.ref == 'refs/heads/master'
    permissions:
      contents: read
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    defaults:
      run:
        shell: bash

    steps:
      - name: Check out GitHub repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          fetch-depth: 1
          ref: ${{ github.sha }}
          persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c
        id: setup_python
        with:
          python-version-file: '.python-version'

      - name: Manage Poetry cache
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809
        with:
          path: |
            ~/.cache/pypoetry/cache
            ~/.cache/pypoetry/artifacts
          key: poetry-cache-${{ runner.os }}-${{ hashFiles('poetry.lock') }}
          restore-keys: poetry-cache-${{ runner.os }}-

      - name: Create virtual environment and install Poetry
        run: |
          python -m venv venv
          . venv/bin/activate
          pip install --upgrade pip
          pip install poetry==2.2.1

      - name: Install dependencies with Poetry
        run: |
          . venv/bin/activate
          poetry install --with docs

      - name: Build documentation for GitHub Pages
        run: |
          . venv/bin/activate
          cd docs
          make builddocs
          echo "Documentation built successfully"

      - name: Setup Pages
        uses: actions/configure-pages@983d7736d9b0ae728b81ab479565c72886d7745b

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@7b1f4a764d45c48632c6b24a0339c27f5614fb0b
        with:
          path: docs/build/html

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@d6db90164ac5ed86f2b6aed7e0febac5b3c0c03e
